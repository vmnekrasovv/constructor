@use 'sass:color';
@use 'sass:list';
@use 'sass:math';
@use 'sass:meta';

@function _make-gradient-list($map, $color, $opacity, $start, $end) {
  $color-stops: ();
  @each $key, $mod in $map {
    $position: $mod * ($end - $start) + $start;
    $new-stop: color.change($color, $alpha: $key * $opacity);
    $color-stops: list.append($color-stops, $new-stop $position, "comma");
  }
  @return $color-stops;
}

// `scrim` smoothing
@function scrim($color: #000000, $opacity: 1, $start: 0, $end: 100%) {
  // validate arguments
  @if meta.type-of($color) != color {
    @error '$color must be a color, was #{$color}';
  }
  @if meta.type-of($opacity) != number or $opacity < 0 or $opacity > 1 {
    @error '$opacity must be a number from 0 to 1, was #{$opacity}';
  }
  @if not math.compatible($start, $end) {
    @error '$start and $end values must be compatible: were #{$start} and #{$end}';
  }

  $scrim: (
    1: 0,
    0.990: 0.11,
    0.980: 0.12,
    0.970: 0.13,
    0.960: 0.14,
    0.950: 0.15,
    0.940: 0.16,
    0.930: 0.17,
    0.920: 0.18,
    0.910: 0.19,
    0.900: 0.2,

    0.890: 0.21,
    0.880: 0.22,
    0.870: 0.23,
    0.860: 0.24,
    0.850: 0.25,
    0.840: 0.26,
    0.830: 0.27,
    0.820: 0.28,
    0.810: 0.29,
    0.800: 0.3,

    0.790: 0.31,
    0.780: 0.32,
    0.770: 0.33,
    0.760: 0.34,
    0.750: 0.35,
    0.740: 0.36,
    0.730: 0.37,
    0.720: 0.38,
    0.710: 0.39,
    0.700: 0.4,

    0.690: 0.41,
    0.680: 0.42,
    0.670: 0.43,
    0.660: 0.44,
    0.650: 0.45,
    0.640: 0.46,
    0.630: 0.47,
    0.620: 0.48,
    0.610: 0.49,
    0.600: 0.5,

    0.590: 0.51,
    0.580: 0.52,
    0.570: 0.53,
    0.560: 0.54,
    0.550: 0.55,
    0.540: 0.56,
    0.530: 0.57,
    0.520: 0.58,
    0.510: 0.59,
    0.500: 0.6,

    0.490: 0.61,
    0.480: 0.62,
    0.470: 0.63,
    0.460: 0.64,
    0.450: 0.65,
    0.440: 0.67,
    0.430: 0.675,
    0.420: 0.68,
    0.410: 0.69,
    0.400: 0.7,

    0.390: 0.71,
    0.380: 0.72,
    0.370: 0.73,
    0.360: 0.74,
    0.350: 0.75,
    0.340: 0.76,
    0.330: 0.77,
    0.320: 0.78,
    0.310: 0.79,
    0.300: 0.8,

    0.290: 0.81,
    0.280: 0.82,
    0.270: 0.83,
    0.260: 0.84,
    0.250: 0.85,
    0.240: 0.86,
    0.230: 0.87,
    0.220: 0.88,
    0.210: 0.89,
    0.200: 0.9,

    0.190: 0.91,
    0.180: 0.92,
    0.170: 0.93,
    0.160: 0.94,
    0.150: 0.95,
    0.140: 0.96,
    0.130: 0.97,
    0.120: 0.98,
    0.110: 0.99,
    0.100: 0.995,
    0: 1
  );
  @return _make-gradient-list($scrim, $color, $opacity, $start, $end);
}

// `easeOutSine` smoothing
@function easeOutSine($color: #000000, $opacity: 1, $start: 0, $end: 100%) {
  // validate arguments
  @if meta.type-of($color) != color {
    @error '$color must be a color, was #{$color}';
  }
  @if meta.type-of($opacity) != number or $opacity < 0 or $opacity > 1 {
    @error '$opacity must be a number from 0 to 1, was #{$opacity}';
  }
  @if not math.compatible($start, $end) {
    @error '$start and $end values must be compatible: were #{$start} and #{$end}';
  }

  $easeOutSine: (
    1: 0,
    0.917: 0.053,
    0.834: 0.106,
    0.753: 0.159,
    0.672: 0.213,
    0.591: 0.268,
    0.511: 0.325,
    0.433: 0.384,
    0.357: 0.445,
    0.283: 0.509,
    0.213: 0.577,
    0.147: 0.65,
    0.089: 0.729,
    0.042: 0.814,
    0.011: 0.906,
    0: 1
  );
  @return _make-gradient-list($easeOutSine, $color, $opacity, $start, $end);
}

// `clothoid` smoothing
@function clothoid($color: #000000, $opacity: 1, $start: 0, $end: 100%) {
  // validate arguments
  @if meta.type-of($color) != color {
    @error '$color must be a color, was #{$color}';
  }
  @if meta.type-of($opacity) != number or $opacity < 0 or $opacity > 1 {
    @error '$opacity must be a number from 0 to 1, was #{$opacity}';
  }
  @if not math.compatible($start, $end) {
    @error '$start and $end values must be compatible: were #{$start} and #{$end}';
  }

  $clothoid: (
    1: 0,
    0.3: 0.50,
    0.15: 0.65,
    0.075: 0.755,
    0.037: 0.8285,
    0.019: 0.88,
    0: 1
  );
  @return _make-gradient-list($clothoid, $color, $opacity, $start, $end);
}
